---
title: "Workflow_Everytime"
format: html
editor: visual
---

This reminds us of the steps required every time we started working on our project.

### **1. Start Work: Keep the `main` Branch Updated**

#### Step 1: Switch to the `main` Branch

In RStudio: 1. Open the **Git** tab. 2. Ensure you are on the `main` branch by selecting it from the branch dropdown (visible in the Git tab toolbar).

Alternatively, in the RStudio Terminal, run:

``` bash
git checkout main
```

#### Step 2: Pull the Latest Changes

In the **Git** tab, click the **Pull** button to fetch and merge any updates from the remote `main` branch.

------------------------------------------------------------------------

### **2. Create a New Branch for Your Work**

#### Step 3: Create a New Branch

1.  In the **Git** tab, click **New Branch**.
2.  Name your branch descriptively based on your task (e.g., `feature/add-plot` or `fix/readme-typo`).
3.  RStudio will automatically switch you to the new branch after creation.

Alternatively, in the RStudio Terminal, run:

``` bash
git checkout -b <branch-name>
```

#### Step 4: Confirm the New Branch

Check that you are on the new branch in the **Git** tab (the branch name should appear in the toolbar). You can also verify with:

``` bash
git branch
```

------------------------------------------------------------------------

### **3. Work Locally on Your Changes**

#### Step 5: Make Changes

1.  Edit or create files in your RStudio project as needed.
2.  Save your work.

#### Step 6: Stage and Commit Changes

1.  In the **Git** tab, check the boxes next to the modified files under **Staged**.
2.  Click **Commit**.
3.  Add a **commit message** describing your changes (e.g., "Added visualization for sales data").
4.  Click **Commit** to save your changes locally.

Alternatively, use the terminal:

``` bash
git add .
git commit -m "Your descriptive message"
```

------------------------------------------------------------------------

### **4. Push Your Branch to GitHub**

#### Step 7: Push Your Branch

1.  In the **Git** tab, click **Push**.
2.  If this is the first time pushing the branch, RStudio may ask to track it with the remote. Confirm this.

Alternatively, use the terminal:

``` bash
git push -u origin <branch-name>
```

The `-u` flag sets the branch to track its remote counterpart.

------------------------------------------------------------------------

### **5. Create a Pull Request (PR) on GitHub**

#### Step 8: Open a PR

1.  Go to your repository on GitHub.
2.  You’ll see a notification about your new branch. Click **Compare & pull request**.
3.  Fill in the PR details:
    -   **Title**: A brief description of your task (e.g., "Add data visualization").
    -   **Description**: Explain your changes and why they are important.
4.  Submit the PR for review.

------------------------------------------------------------------------

### **6. Review and Merge**

#### Step 9: Have Your Partner Review the PR

-   Your partner reviews the changes in the PR on GitHub.
-   They can leave comments, request changes, or approve the PR.

#### Step 10: Merge the PR

-   Once the PR is approved, it can be merged into the `main` branch on GitHub.

------------------------------------------------------------------------

### **7. Sync Your Local Repository**

#### Step 11: Update Your Local `main`

1.  In RStudio:

    -   Switch back to the `main` branch using the branch dropdown in the **Git** tab.
    -   Click **Pull** to fetch the latest changes.

2.  Alternatively, in the terminal:

    ``` bash
    git checkout main
    git pull origin main
    ```

#### Step 12: Delete Old Branches

1.  Delete the **local branch**:
    -   In the RStudio Terminal:

        ``` bash
        git branch -d <branch-name>
        ```

    -   If the branch hasn’t been fully merged, force-delete with:

        ``` bash
        git branch -D <branch-name>
        ```
2.  Delete the **remote branch**:
    -   In the RStudio Terminal:

        ``` bash
        git push origin --delete <branch-name>
        ```
3.  Verify deletion

``` bash
git branch
```

The branch should no longer appear in the list.

4.  Untrack a branch First, check tracking branches

``` bash
git branch -vv
```

If your branch still appears in the output, then

``` bash
git branch --unset-upstream Claire(branch name)
```

Then, verify again.

``` bash
git branch -vv
```

------------------------------------------------------------------------

### **Best Practices for RStudio Workflow**

1.  **Always Work on Feature Branches**:
    -   Never work directly on the `main` branch.
    -   Create a new branch for each feature, bug fix, or task.
2.  **Commit Frequently**:
    -   Commit small, meaningful changes often to keep a clean history.
3.  **Pull Frequently**:
    -   Always pull the latest changes from `main` before creating a new branch or pushing changes.
4.  **Delete Merged Branches**:
    -   Regularly delete merged branches locally and remotely to avoid clutter.
5.  **Communicate with Your Team**:
    -   Let your partner know when you’re working on a branch or waiting for a PR review.

------------------------------------------------------------------------

### Summary Workflow in RStudio

1.  **Update**: Switch to `main` and pull the latest changes.
2.  **Branch**: Create a new branch for your task.
3.  **Work**: Make changes, stage, and commit them.
4.  **Push**: Push your branch to GitHub.
5.  **PR**: Create a pull request on GitHub and request a review.
6.  **Merge**: Once approved, merge the PR and delete the branch.
7.  **Sync**: Pull the latest changes into `main` locally and delete old branches.
