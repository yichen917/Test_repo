---
title: "Workflow_Everytime"
format: html
editor: visual
---

Yes, for ongoing collaboration on a project, the best practice is to always work on **your own branches** locally, push to the corresponding **remote branch**, and create a **Pull Request (PR)** for merging. This approach ensures a clean workflow, reduces the risk of conflicts, and keeps the `main` branch stable. Here's a **standard workflow** for working on your project:

---

### **1. Start Work: Stay Organized with Branches**

#### Step 1: Update Your Local Repository
Before you start working, always pull the latest changes from the `main` branch:
```bash
git checkout main
git pull origin main
```

#### Step 2: Create a New Feature/Task Branch
Create a new branch for your work to keep your changes isolated. Use a descriptive name for the branch:
```bash
git checkout -b feature/<branch-name>
```
For example:
```bash
git checkout -b feature/add-plot
```

---

### **2. Work on Your Changes Locally**

#### Step 3: Make Changes to Files
Edit your files, write code, and save your changes locally.

#### Step 4: Stage and Commit Changes
Once you're ready to save your work:
1. **Stage Changes**:
   ```bash
   git add <file-name>
   ```
   To stage all files:
   ```bash
   git add .
   ```
2. **Commit Changes**:
   ```bash
   git commit -m "Description of changes"
   ```
   For example:
   ```bash
   git commit -m "Added plot for data visualization"
   ```

---

### **3. Push Your Work to the Remote Branch**

#### Step 5: Push the Feature Branch to GitHub
Push your local branch to the remote repository:
```bash
git push origin feature/<branch-name>
```
The first time you push, Git will ask you to set the upstream branch. Confirm with:
```bash
git push --set-upstream origin feature/<branch-name>
```

---

### **4. Open a Pull Request (PR)**

#### Step 6: Create a Pull Request on GitHub
1. Go to the repository on GitHub.
2. You’ll see a notification about the new branch you pushed. Click **Compare & pull request**.
3. Fill in the PR title and description:
   - **Title**: Brief description (e.g., "Add data visualization for sales").
   - **Description**: Explain what changes were made and why.
4. Submit the pull request.

#### Step 7: Wait for Review and Merge
Your partner will review your changes, discuss if needed, and merge the PR into the `main` branch. You should avoid making new changes to this branch until the PR is merged.

---

### **5. Sync with the Updated `main` Branch**

#### Step 8: Pull Changes After PR is Merged
Once your pull request is merged, go back to the `main` branch:
```bash
git checkout main
git pull origin main
```

#### Step 9: Clean Up Old Branches (Optional)
If your feature branch is no longer needed:
1. Delete the local branch:
   ```bash
   git branch -d feature/<branch-name>
   ```
2. Delete the remote branch (if applicable):
   ```bash
   git push origin --delete feature/<branch-name>
   ```

---

### **Standard Steps for Ongoing Work**
Here’s a summarized checklist for every time you work on the project:

1. **Update Local `main`**:
   ```bash
   git checkout main
   git pull origin main
   ```

2. **Create a New Branch**:
   ```bash
   git checkout -b feature/<branch-name>
   ```

3. **Work Locally**:
   - Edit files.
   - Stage and commit changes:
     ```bash
     git add .
     git commit -m "Description of changes"
     ```

4. **Push to Remote**:
   ```bash
   git push origin feature/<branch-name>
   ```

5. **Open a Pull Request**:
   - On GitHub, create a PR to merge your feature branch into `main`.

6. **Sync After Merging**:
   - Pull the latest changes to your local `main` branch:
     ```bash
     git checkout main
     git pull origin main
     ```

7. **Repeat for New Tasks**:
   - Create a new branch for the next task.

---

### **Best Practices to Avoid Messing Up**

1. **Never Work Directly on `main`**: Always use branches for feature development or bug fixes.
2. **Communicate with Your Partner**: Inform them about the branch you're working on.
3. **Pull Changes Frequently**: Before creating a branch or pushing changes, always pull the latest `main`.
4. **Resolve Conflicts Promptly**: If you encounter a conflict, resolve it locally before pushing.
5. **Keep PRs Small**: Make PRs for specific features or fixes. Large PRs are harder to review and merge.

---

Let me know if you want further clarification or help with any step!